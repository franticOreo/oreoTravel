extends layout

block content
  link(href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet")
  script(src='/javascripts/main.js')
  script(src='/javascripts/city_state.js')
  script(src='/javascripts/Vibrant.min.js')
  nav.paper
    div
      .sideInfo #{title}
    div#profile.invert2
      div
        label Welcome #{firstName}
      div
        button#btnMatch.btnNav
          i.material-icons search
      div
        button#btnNewTrip.btnNav
          i.material-icons add
      div
        button#btnSettings.btnNav(style="display: none;")
          i.material-icons settings
    #sideInfo
    div
      input#aboutBtnDash.btn.invert2(type='button' value='About')
  #view.paper
    div
      h3#currentTripTitle
    div
      //- label.centerText(for='orderBy') Order By
      select#orderBy.flat(onchange='refreshTasks();')
        option(value='0') Date
        option(value='1') Priority
        option(value='2') Assignment
        option(value='3') Done
      
    //- button#view.logout(href='/dash/logout') Logout
    
    div
      form(name='logout' method="get" action="dash/logout")
        input#logout.flat(type='submit' value='Logout')


  #main
    form#newTask.paper(action='/dash/addtask/' + selectedTrip method='POST')
      #addTaskContent(style='display: none;')
        .wideGrid
          input#newTaskName.flatinput(type='text' name='name' placeholder='New Task')
        .wideGrid
          #newTaskDesc.flatinput(contenteditable='true' name='description' placeholder='Decription')
        div
          label(for='newTaskDate') Due Date
          br
          input#newTaskDate.flat(type='date' name='date')
        div
          label(for='newTaskPriority') Priority
          br
          select(name='priority')#newTaskPriority.flat
            option(value='0') High
            option(value='1' selected='selected') Medium
            option(value='2') Optional
        div
          label(for='newTaskAssign') Assign
          br
          select(name='assign')#newTaskAssign.flat
        .wideGrid
          if tripName[0]
            input#addTaskBtn.btnEmbed(type='button' value='Add Task' onclick='addTask(\"' + tripName[0]._id + '\");')
          else
            input#addTaskBtn.btnEmbed(type='button' value='Add Task' onclick='addTask();')
      #addTaskCover +
  #infoBar.paper
    label#taskCount.info
    label#tasksRemain.info
    label#modTime.info
  #aboutBlanket.blanket(style='display: none;')
    #aboutPage.aboutSpotlight
      h2 Group Members
      | Eli Simic Robertson
      br
      |  Studies Marketing major, completed majority of broadening units in Data Science.
      br
      |  Enjoys Python & Automating things 
      br
      br
      |  Tim Wise
      br 
      |  Studies Math & Data Science
      br
      br
      |  Loves abstract thinking, especially difficult math that seems useless
      br      
      | Taige Lui
      br
      |  Studies Physics & Data Science
      br
      |  Enjoys playing Piano
      h2 Matching Algorithm Explanation
      p Our matching algorithm matches users with similar preferences for the destinations in which they wish to travel. This is accomplished by using the aggregate operator on our Trip schema. Users can either select a region, country or city/state. City/state has the highest precedence in the algorithm (eg. If a user decides to select a city/state, the algorithm will search for city/state before matches of countries and so on.)
        |  The aggregation operation on the Trip schema allows the algorithm to make use of the $facet which splits the aggregation pipeline into, in our case four sub-pipelines. The sub-pipelines are as follows; city, country, region and global. All of these sub-pipelines have different weights in order to impose the precedence mentioned above. Note, the global pipeline returns any results if not enough matches meet the limit of ten.
        |  Finally, all sub-pipeline results are returned into separate arrays, they are concatenated and then projected into a readable form for the user.
      h2 Architecture and Design Choices
      p Initially, our group decided to take a overall bottom-up approach to the design process. As we were new to these frameworks and even Javascript, we thought taking a top down approach would be difficult to execute. So we set small goals (eg. display users info when logged in) then we built on top of these goals.
        |  We used the given projects on CITS5504 website and other tutorials to base our user validation and the general routing around the application. However, we found that using a lot of routes without Angular was creating a lot of page refreshes, so we decided to use Ajax to create a more seamless user experience.
        |  The design for our matching algorithm came relatively naturally, however implementing it was far more difficult. We found inconsistencies with different responses from using the mongo shell and using mongo inside of Node.js.
        |  Another difficulty was separating the workflow, as we went for a bottom-up approach each stage was heavily reliant on the prior. We found at times, this meant a group member could only work on the project at a time. This was obviously, very efficient and required better planning.
        |  Overall, the MEAN stack seems to be a relatively easy architecture to use considering it is all javascript. However, compared to a lot of other Computer Science/Data Science units there was a lot of content to learn. We would argue the content was not to difficult to comprehend rather the volume of content at times was overwhelming. Ultimately, this is a very powerful technology with vast applications and it has been an overall enjoyable experience. 
      //- h2 Git Hub Repository
      a(href="https://github.com/franticOreo/oreoTravel" target="_blank") Git Hub Repo
      br
      br
      h2 Heroku Instructions
      a(href="https://dashboard.heroku.com/apps/still-lake-64912" target="_blank") Heruko Website
      
  #settingsBlanket.blanket(style='display: none;')
    #settingsPage.spotlight
      h2 Settings
  #matchBlanket.blanket(style='display: none;')
    #matchPage.spotlight
      h2 Your Matches
      #matchContent
  #newTripBlanket.blanket(style='display: none;')
    #newTripPage.spotlight
      h2 New Trip
      form#newTripForm.register(action='/dash/addtrip' method="POST")
        div
          label.creds Title
        div
          input.creds(type='text' name='tripName' placeholder='Tripping' required='')
        div
          label.creds Region
        div
          select.creds(onchange="set_country(this,country,city_state)" size="1" name="region" required='')
            option(value="" selected="selected") SELECT REGION
            script(type="text/javascript").
              setRegions(this);
        div
          label.creds Country
        div
          select.creds(name="country" size="1" disabled="disabled" onchange="set_city_state(this,city_state)" required='')
        div
          label.creds City/State
        div
          select.creds(name="city_state" size="1" disabled="disabled" required='')
        div
        div
          input.btn(type='submit' value='Create')
